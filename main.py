import asyncio
import os
import json
import random
import signal
import sys
from datetime import datetime, time
from zoneinfo import ZoneInfo

import requests
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto

# ----------------------------
# ENV + –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ (Railway Volume)
# ----------------------------
load_dotenv()

DATA_DIR = os.getenv("DATA_DIR", "/data")  # –ù–∞ Railway –∑–º–æ–Ω—Ç—É–π Volume —É /data
os.makedirs(DATA_DIR, exist_ok=True)
SENT_IDS_PATH = os.path.join(DATA_DIR, "sent_ids.json")

TZ_NAME = os.getenv("BOT_TZ", "Europe/Kyiv")
LOCAL_TZ = ZoneInfo(TZ_NAME)

BASE_URL = "https://api.themoviedb.org/3"
TMDB_TOKEN = os.getenv("TMDB_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TELEGRAM_TOKEN:
    print("ERROR: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    sys.exit(1)

headers = {"Authorization": f"Bearer {TMDB_TOKEN}"} if TMDB_TOKEN else {}

# ----------------------------
# –°—Ç–∞–Ω
# ----------------------------
sent_movie_ids: list[int] = []
MAX_SENT_IDS = 1000
current_page = 1  # —Ç—Ä–µ–∫–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ top_rated

def save_sent_ids():
    """–ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö ID —É —Ñ–∞–π–ª (—É Volume)."""
    try:
        with open(SENT_IDS_PATH, "w", encoding="utf-8") as f:
            json.dump(sent_movie_ids, f)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è sent_ids: {e}")

def load_sent_ids():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö ID –∑ —Ñ–∞–π–ª—É (–∑ Volume)."""
    if os.path.exists(SENT_IDS_PATH) and os.path.getsize(SENT_IDS_PATH) > 0:
        try:
            with open(SENT_IDS_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON-—Ñ–∞–π–ª—É sent_ids. –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è sent_ids: {e}")
    return []

# ----------------------------
# TMDB helpers
# ----------------------------
def fetch_trending_movies():
    try:
        resp = requests.get(
            f"{BASE_URL}/trending/movie/day",
            params={"language": "uk-UA"},
            headers=headers,
            timeout=20,
        )
        resp.raise_for_status()
        movies = resp.json().get("results", [])
        for m in movies:
            m["poster_url"] = f"https://image.tmdb.org/t/p/w500{m['poster_path']}" if m.get("poster_path") else None
        return movies
    except Exception as e:
        print(f"fetch_trending_movies error: {e}")
        return []

def fetch_movies(query: str):
    try:
        resp = requests.get(
            f"{BASE_URL}/search/movie",
            params={
                "query": query,
                "include_adult": "false",
                "language": "uk-UA",
                "page": 1,
            },
            headers=headers,
            timeout=20,
        )
        resp.raise_for_status()
        return resp.json().get("results", [])
    except Exception as e:
        print(f"fetch_movies error: {e}")
        return []

def fetch_movie_details(movie_id: int | str):
    try:
        resp = requests.get(
            f"{BASE_URL}/movie/{movie_id}",
            params={"language": "uk-UA"},
            headers=headers,
            timeout=20,
        )
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"fetch_movie_details error: {e}")
        return {}

def fetch_movie_credits(movie_id: int | str):
    try:
        resp = requests.get(
            f"{BASE_URL}/movie/{movie_id}/credits",
            params={"language": "uk-UA"},
            headers=headers,
            timeout=20,
        )
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"fetch_movie_credits error: {e}")
        return {}

def extract_director(credits: dict) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º'—è —Ä–µ–∂–∏—Å–µ—Ä–∞ –∑ credits.crew."""
    crew = credits.get("crew", []) or []
    # –ü–æ—à—É–∫ job == Director
    for person in crew:
        if (person.get("job") == "Director") or (
            person.get("known_for_department") == "Directing" and person.get("job") in {"Director", "Co-Director"}
        ):
            return person.get("name") or "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏—Å–µ—Ä"
    return "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏—Å–µ—Ä"

def fetch_random_movie():
    """–Ü—Ç–µ—Ä—É—î–º–æ—Å—è –ø–æ /movie/top_rated —Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–æ, —â–æ–± –∑–∞–≤–∂–¥–∏ –±—É–ª–æ —â–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏."""
    global sent_movie_ids, current_page

    endpoint = "top_rated"
    try:
        resp = requests.get(
            f"{BASE_URL}/movie/{endpoint}",
            params={"language": "uk-UA", "page": current_page},
            headers=headers,
            timeout=20,
        )
        resp.raise_for_status()
        movies = resp.json().get("results", [])
    except Exception as e:
        print(f"fetch_random_movie error: {e}")
        movies = []

    if not movies:
        print(f"–ü–æ—Ä–æ–∂–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page}. –°–∫–∏–¥–∞—é –ø–∞–º'—è—Ç—å, –ø–æ—á–∏–Ω–∞—é –∑ 1.")
        sent_movie_ids = []
        current_page = 1
        return fetch_random_movie()

    available = [m for m in movies if m.get("id") not in sent_movie_ids]
    if not available:
        print(f"–£—Å—ñ —Ñ—ñ–ª—å–º–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {current_page} –≤–∂–µ –±—É–ª–∏. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ {current_page + 1}.")
        current_page += 1
        return fetch_random_movie()

    movie = random.choice(available)
    sent_movie_ids.append(movie["id"])
    if len(sent_movie_ids) > MAX_SENT_IDS:
        sent_movie_ids.pop(0)

    if movie.get("poster_path"):
        movie["poster_url"] = f"https://image.tmdb.org/t/p/w500{movie['poster_path']}"

    return movie

# ----------------------------
# Bot
# ----------------------------
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=LOCAL_TZ)
active_chats: dict[int, bool] = {}

async def send_daily_movie(chat_id: int):
    try:
        current_hour = datetime.now(LOCAL_TZ).hour
        if 6 <= current_hour <= 11:
            greeting = "–†–∞–Ω–æ—á–∫—É!ü§ó –©–æ–± –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—å –ø–æ–¥–∏–≤–∏—Å—å:"
        elif 12 <= current_hour <= 16:
            greeting = "–ê —Ö—Ç–æ —Ü–µ –¥—É—Ä–Ω—è –∫–ª–µ—ó—Ç—å?üôÉ –©–æ–± –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å –∑ –∫–æ—Ä–∏—Å—Ç—é‚úä —è –∑–Ω–∞–π—à–æ–≤ –¥–ª—è —Ç–µ–±–µ:"
        elif 17 <= current_hour <= 22:
            greeting = "–í–∂–µ –≤–µ—á—ñ—Ä! –ß–∞—Å –≤—ñ–¥–ø–æ—á–∏—Ç–∏üçø:"
        else:  # 23:00 - 5:59
            greeting = "–ù–∞–≤—ñ—â–æ —Å–ø–∞—Ç–∏?üò¥ –ö—Ä–∞—â–µ –ø–æ–¥–∏–≤–∏—Å—å:"

        movie = fetch_random_movie()
        if not movie:
            await bot.send_message(chat_id=chat_id, text="–°—Ö–æ–∂–µ, TMDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É—é –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        details = fetch_movie_details(movie["id"])
        credits = fetch_movie_credits(movie["id"])

        genres = [g["name"] for g in details.get("genres", [])][:5]
        genres_str = ", ".join(genres) if genres else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∂–∞–Ω—Ä"

        director = extract_director(credits)
        actors = [a["name"] for a in (credits.get("cast") or [])][:4]
        actors_str = ", ".join(actors) if actors else "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫—Ç–æ—Ä—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è"

        caption = (
            f"{greeting}\n\n"
            f"**{movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}** ({movie.get('release_date', '?')[:4]})\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: **{movie.get('vote_average', '?')}/10**\n\n"
            f"üé≠ –ñ–∞–Ω—Ä: **{genres_str}**\n\n"
            f"üé¨ –†–µ–∂–∏—Å–µ—Ä: **{director}**\n\n"
            f"üë• –ê–∫—Ç–æ—Ä–∏: **{actors_str}**\n\n"
            f"üìù {movie.get('overview', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
        )

        if movie.get("poster_url"):
            await bot.send_photo(chat_id=chat_id, photo=movie["poster_url"], caption=caption, parse_mode="Markdown")
        else:
            await bot.send_message(chat_id=chat_id, text=caption, parse_mode="Markdown")

        print(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: '{movie.get('title')}', ID –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ—ñ–ª—å–º—É: {e}")
    finally:
        save_sent_ids()

@dp.message(Command("start"))
async def on_bot_added(message: types.Message):
    if message.chat.type in ("group", "supergroup", "private"):
        chat_id = message.chat.id
        if chat_id not in active_chats:
            active_chats[chat_id] = True
            # –ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
            scheduler.add_job(send_daily_movie, "interval", seconds=30, args=[chat_id])
            await message.answer("ü§ñ –Ø –∞–∫—Ç–∏–≤–Ω–∏–π! –ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ü—ñ–∫–∞–≤–∏–π —Ñ—ñ–ª—å–º.")
        else:
            await message.answer("ü§ñ –Ø –≤–∂–µ –ø—Ä–∞—Ü—é—é —É —Ü—å–æ–º—É —á–∞—Ç—ñ!")

@dp.message(Command("reset"))
async def reset_ids(message: types.Message):
    global sent_movie_ids
    sent_movie_ids = []
    save_sent_ids()
    await message.answer("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ –æ—á–∏—â–µ–Ω–æ.")

@dp.message(Command("trending"))
async def send_trending(message: types.Message):
    movies = fetch_trending_movies()[:10]
    if not movies:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ñ —Ñ—ñ–ª—å–º–∏ üòï")
        return

    first = movies[0]
    caption = (
        f"üé¨ <b>{first.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∏')}</b> ({first.get('release_date','?')[:4]})\n"
        f"‚≠ê <i>–†–µ–π—Ç–∏–Ω–≥: {first.get('vote_average','?')}/10</i>\n"
        f"üìù {first.get('overview','–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
    )

    media = []
    if first.get("poster_url"):
        media.append(InputMediaPhoto(media=first["poster_url"], caption=caption, parse_mode="HTML"))
    else:
        await message.answer(caption, parse_mode="HTML")

    for m in movies[1:]:
        if m.get("poster_url"):
            media.append(InputMediaPhoto(media=m["poster_url"]))

    if media:
        await message.answer_media_group(media=media)

@dp.message(Command("search"))
async def search_movies(message: types.Message):
    try:
        query = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É: /search –ù–∞–∑–≤–∞")
        return

    movies = fetch_movies(query)
    if not movies:
        await message.answer("–§—ñ–ª—å–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ üòï")
        return

    response = "\n".join(f"{m.get('title','?')} ({m.get('release_date','?')[:4]})" for m in movies[:3])
    await message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n{response}")

@dp.message(Command("details"))
async def movie_details_cmd(message: types.Message):
    try:
        movie_id = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Ñ—ñ–ª—å–º—É: /details ID")
        return

    details = fetch_movie_details(movie_id)
    credits = fetch_movie_credits(movie_id)
    if not details:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º.")
        return

    director = extract_director(credits)
    actors = ", ".join(a.get("name", "?") for a in (credits.get("cast") or [])[:3])

    response = (
        f"üìΩ {details.get('title','?')} ({details.get('release_date','?')[:4]})\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {details.get('vote_average','?')}/10\n"
        f"üé¨ –†–µ–∂–∏—Å–µ—Ä: {director}\n"
        f"üìù {details.get('overview','–ù–µ–º–∞—î –æ–ø–∏—Å—É')[:200]}...\n"
        f"üé≠ –ê–∫—Ç–æ—Ä–∏: {actors or '‚Äî'}"
    )
    await message.answer(response)

# ----------------------------
# –ó–∞–ø—É—Å–∫ / –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
# ----------------------------
async def on_startup():
    scheduler.start()
    global sent_movie_ids
    sent_movie_ids = load_sent_ids()
    if sent_movie_ids:
        print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(sent_movie_ids)} ID —Ñ—ñ–ª—å–º—ñ–≤ –∑—ñ —Å—Ö–æ–≤–∏—â–∞.")
    else:
        print("–°—Ö–æ–≤–∏—â–µ ID –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—î. –ü–æ—á–∏–Ω–∞—é –∑ —á–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫—É.")

async def on_shutdown():
    try:
        save_sent_ids()
        await bot.session.close()
    except Exception as e:
        print(f"on_shutdown error: {e}")

async def main():
    await on_startup()
    try:
        # Long polling ‚Äî –¥–æ–º–µ–Ω/–ø–æ—Ä—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        # –ê–∫—É—Ä–∞—Ç–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –Ω–∞ Windows –ø—Ä–∏ Ctrl+C
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (KeyboardInterrupt).")