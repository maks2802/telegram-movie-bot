import asyncio
import random
import os
import json
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ env
load_dotenv()

BASE_URL = "https://api.themoviedb.org/3"
TMDB_TOKEN = os.getenv("TMDB_TOKEN")
headers = {
    "Authorization": f"Bearer {TMDB_TOKEN}"
}

# --- –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É ---
sent_movie_ids = []
MAX_SENT_IDS = 1000
current_page = 1 # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏

def save_sent_ids():
    """–ó–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö ID —É —Ñ–∞–π–ª."""
    with open('sent_ids.json', 'w') as f:
        json.dump(sent_movie_ids, f)

def load_sent_ids():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö ID –∑ —Ñ–∞–π–ª—É."""
    if os.path.exists('sent_ids.json') and os.path.getsize('sent_ids.json') > 0:
        try:
            with open('sent_ids.json', 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ JSON-—Ñ–∞–π–ª—É. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫.")
    return []

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ TMDB API ---
def fetch_trending_movies():
    response = requests.get(
        f"{BASE_URL}/trending/movie/day?language=uk-UA",
        headers=headers
    )
    movies = response.json().get("results", [])
    for movie in movies:
        if movie.get("poster_path"):
            movie["poster_url"] = f"https://image.tmdb.org/t/p/w500{movie['poster_path']}"
        else:
            movie["poster_url"] = None
    return movies

def fetch_movies(query):
    response = requests.get(
        f"{BASE_URL}/search/movie",
        params={
            "query": query,
            "include_adult": "false",
            "language": "uk-UA",
            "page": 1
        },
        headers=headers
    )
    return response.json().get("results", [])

def fetch_movie_details(movie_id):
    response = requests.get(
        f"{BASE_URL}/movie/{movie_id}?language=uk-UA",
        headers=headers
    )
    return response.json()

def fetch_movie_cast(movie_id):
    response = requests.get(
        f"{BASE_URL}/movie/{movie_id}/credits?language=uk-UA",
        headers=headers
    )
    return response.json()

def fetch_random_movie():
    global sent_movie_ids, current_page
    
    # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ top_rated, –ø–µ—Ä–µ—Ö–æ–¥—è—á–∏ –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö
    endpoint = "top_rated"
    
    response = requests.get(
        f"{BASE_URL}/movie/{endpoint}?language=uk-UA&page={current_page}",
        headers=headers
    )
    movies = response.json().get("results", [])
    
    if not movies:
        print(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è —Å–ø–∏—Å–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {current_page}. –°–∫–∏–¥–∞—î–º–æ –ø–∞–º'—è—Ç—å —ñ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—á–∞—Ç–∫—É.")
        sent_movie_ids = []
        current_page = 1
        return fetch_random_movie()
    
    available_movies = [movie for movie in movies if movie['id'] not in sent_movie_ids]
    
    if not available_movies:
        print(f"–í—Å—ñ —Ñ—ñ–ª—å–º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {current_page} –≤–∂–µ –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.")
        current_page += 1
        return fetch_random_movie()
    
    movie = random.choice(available_movies)
    sent_movie_ids.append(movie['id'])
    
    if len(sent_movie_ids) > MAX_SENT_IDS:
        sent_movie_ids.pop(0)
    
    if movie.get("poster_path"):
        movie["poster_url"] = f"https://image.tmdb.org/t/p/w500{movie['poster_path']}"
    
    return movie

# --- –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –±–æ—Ç–∞ ---
sent_movie_ids = load_sent_ids()
if sent_movie_ids:
    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(sent_movie_ids)} —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ —Ñ—ñ–ª—å–º—ñ–≤.")
else:
    print("–§–∞–π–ª –∑ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ —á–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫—É.")

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()
scheduler = AsyncIOScheduler()
active_chats = {}

async def send_daily_movie(chat_id: int):
    try:
        current_hour = datetime.now().hour

        if 6 <= current_hour <= 11:
            greeting = "–†–∞–Ω–æ—á–∫—É!ü§ó –©–æ–± –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—å –ø–æ–¥–∏–≤–∏—Å—å:"
        elif 12 <= current_hour <= 16:
            greeting = "–ê —Ö—Ç–æ —Ü–µ –¥—É—Ä–Ω—è –∫–ª–µ—ó—Ç—å?üôÉ –©–æ–± –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å –∑ –∫–æ—Ä–∏—Å—Ç—é‚úä —è –∑–Ω–∞–π—à–æ–≤ –¥–ª—è —Ç–µ–±–µ:"
        elif 17 <= current_hour <= 22:
            greeting = "–í–∂–µ –≤–µ—á—ñ—Ä! –ß–∞—Å –≤—ñ–¥–ø–æ—á–∏—Ç–∏üçø:"
        else: # 23:00 - 5:59
            greeting = "–ù–∞–≤—ñ—â–æ —Å–ø–∞—Ç–∏?üò¥ –ö—Ä–∞—â–µ –ø–æ–¥–∏–≤–∏—Å—å:"

        movie = fetch_random_movie()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º (–∂–∞–Ω—Ä–∏, –∞–∫—Ç–æ—Ä–∏)
        details = fetch_movie_details(movie['id'])
        cast = fetch_movie_cast(movie['id'])

        # –û–±—Ä–æ–±–∫–∞ –∂–∞–Ω—Ä—ñ–≤, –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 5
        genres = [g['name'] for g in details.get('genres', [])][:5]
        genres_str = ", ".join(genres) if genres else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∂–∞–Ω—Ä"

        # –û–±—Ä–æ–±–∫–∞ –∞–∫—Ç–æ—Ä—ñ–≤, –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 4
        actors = [a['name'] for a in cast.get('cast', [])][:4]
        actors_str = ", ".join(actors) if actors else "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫—Ç–æ—Ä—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—è"
        
        caption = (
            f"{greeting}\n\n"
            f"**{movie['title']}** ({movie.get('release_date', '?')[:4]})\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: **{movie.get('vote_average', '?')}/10**\n\n"
            f"üé≠ –ñ–∞–Ω—Ä: **{genres_str}**\n\n"
            f"üë• –ê–∫—Ç–æ—Ä–∏: **{actors_str}**\n\n"
            f"üìù {movie.get('overview', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
        )
        
        if movie.get('poster_url'):
            await bot.send_photo(
                chat_id=chat_id,
                photo=movie['poster_url'],
                caption=caption,
                parse_mode="Markdown"
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=caption,
                parse_mode="Markdown"
            )
        
        print(f"–§—ñ–ª—å–º '{movie['title']}' –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, ID –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ—ñ–ª—å–º—É: {e}")
    finally:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≤ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É
        save_sent_ids()

@dp.message(Command("start"))
async def on_bot_added(message: types.Message):
    if message.chat.type in ('group', 'supergroup'):
        chat_id = message.chat.id
        
        if chat_id not in active_chats:
            active_chats[chat_id] = True
            
            scheduler.add_job(
                send_daily_movie,
                'interval',
                seconds=30,
                args=[chat_id]
            )
            await message.answer("ü§ñ –¢–µ–ø–µ—Ä —è –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ü—ñ–∫–∞–≤–∏–π —Ñ—ñ–ª—å–º!")
        else:
            await message.answer("ü§ñ –Ø –≤–∂–µ –ø—Ä–∞—Ü—é—é —É —Ü—ñ–π –≥—Ä—É–ø—ñ!")

@dp.message(Command("trending"))
async def send_trending(message: types.Message):
    movies = fetch_trending_movies()[:10]
    
    if not movies:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ñ —Ñ—ñ–ª—å–º–∏ üòï")
        return
    
    first_movie = movies[0]
    
    caption = (
        f"üé¨ <b>{first_movie['title']}</b> ({first_movie.get('release_date', '?')[:4]})\n"
        f"‚≠ê <i>–†–µ–π—Ç–∏–Ω–≥: {first_movie.get('vote_average', '?')}/10</i>\n"
        f"üìù {first_movie.get('overview', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
    )
    
    media = [InputMediaPhoto(
        media=first_movie["poster_url"],
        caption=caption
    )]
    
    for movie in movies[1:]:
        if movie.get("poster_url"):
            media.append(InputMediaPhoto(media=movie["poster_url"]))
    
    await message.answer_media_group(media=media)

@dp.message(Command("search"))
async def search_movies(message: types.Message):
    try:
        query = message.text.split(maxsplit=1)[1]
        movies = fetch_movies(query)
        if not movies:
            await message.answer("–§—ñ–ª—å–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ üòï")
            return
        
        response = "\n".join(
            f"{movie['title']} ({movie.get('release_date', '?')[:4]})" 
            for movie in movies[:3]
        )
        await message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n{response}")
    except IndexError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É: /search –ù–∞–∑–≤–∞")

@dp.message(Command("details"))
async def movie_details(message: types.Message):
    try:
        movie_id = message.text.split(maxsplit=1)[1]
        details = fetch_movie_details(movie_id)
        cast = fetch_movie_cast(movie_id)
        
        actors = ", ".join(actor["name"] for actor in cast.get("cast", [])[:3])
        response = (
            f"üìΩ {details['title']} ({details.get('release_date', '?')[:4]})\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {details.get('vote_average', '?')}/10\n"
            f"üìù {details.get('overview', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')[:200]}...\n"
            f"üé≠ –ê–∫—Ç–æ—Ä–∏: {actors}"
        )
        await message.answer(response)
    except IndexError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID —Ñ—ñ–ª—å–º—É: /details ID")

async def on_startup():
    scheduler.start()

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())